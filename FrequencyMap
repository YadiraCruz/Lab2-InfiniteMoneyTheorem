//Imports the necessary objects
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;

/**	Lab 2 - Infinite Monkey Theorem
 * 
 * 	Authors: Lydia Pitts and Yadira Cruz
 * 	Created: 2/19/19
 *
 *  This code establishes the FrequencyMap Class, which creates a map of characters and their frequencies.
 *  	1) Creates a FrequencyMap with <Character, Integer>
 *  	2) Finds the character to add from the string representation of the file, and adds it to the map.
 *  	3) Generates the character based on probability to add to the output of WordGen.
 */
public class FrequencyMap {
	
	String STRING_FILE = ""; //Stores the string representation of the file
	String SEQUENCE = "";	 //Stores the k-length string sequence.
	char NEW_CHAR = ' ';	 //Stores the new character to be added to the FrequencyMap.

	
	
	/**
	 * The Constructor Method.
	 */
	public FrequencyMap(String fileName, String sequence) {
		STRING_FILE = fileName;
		SEQUENCE = sequence;
	}
	
	
	
	/**
	 * Creates a map that will contain characters and an integer for the number of appearances after each
	 */
	public Map<Character, Integer> newMap = new HashMap<Character, Integer>();

	
	
	/**
	 * Gets the character that follows each k-length sequence.
	 * puts this character into NEW_CHAR.
	 */
	public void getNewChar(){
		int indexOfSeq = STRING_FILE.indexOf(SEQUENCE);
		int seqLength = SEQUENCE.length();
		int indexOfChar = indexOfSeq + seqLength;
		char theCharacter = STRING_FILE.charAt(indexOfChar);
		//STRING_FILE.replaceFirst(SEQUENCE, "_" + SEQUENCE.substring(1));
		NEW_CHAR = theCharacter;
		char[] fileChars = STRING_FILE.toCharArray();
		fileChars[indexOfSeq] = '_';
		STRING_FILE = String.valueOf(fileChars);//This makes sure it doesn't use the same set of letters each time
		//System.out.println(fileChars);
	}//End of getNewChar
	
	
	
	/**
	 * Adds the character from NEW_CHAR (created by getNewChar()) to the map.
	 * If the character is already in the map, it adds 1 to the value.
	 * If the character is not in the map, it puts it in the map with a value of 1.
	 */
	public void addToMap() {
		if (newMap.containsKey(NEW_CHAR))
		{
			newMap.put(NEW_CHAR, newMap.get(NEW_CHAR) + 1);
		} else {
			newMap.put(NEW_CHAR, 1);
		}
	}//End addToMap
	
	
	
	/**
	 * Creates an array with the characters appearing in the frequencies shown by their value in the map.
	 * Uses random to select a random character from the array.
	 * Character is used to add onto the output in WordGen.
	 * @return a character based on probabilities shown in the FrequencyMap.
	 */
	public char charToAdd() {
		ArrayList<Character> charProbabilities = new ArrayList<Character>();
		for(char item : newMap.keySet()) {
			int numOfChar = newMap.get(item);
			int i = 0;
			while (i < numOfChar) {
				charProbabilities.add(item);
				i++;
			}
		}
		int length = charProbabilities.size();
		int index = (int) (Math.random() * length); 
		return charProbabilities.get(index);
	}//end of charToAdd
	
	
	
}//End of Class
